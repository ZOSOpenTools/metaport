export ZOPEN_GIT_URL="https://github.com/ZOSOpenTools/meta.git"
export ZOPEN_TYPE="GIT"
export ZOPEN_GIT_DEPS="git gzip make tar zoslib"

export ZOPEN_CONFIGURE="skip"
export ZOPEN_MAKE="skip"
export ZOPEN_CHECK="zopen_check"

if [ -z "${ZOPEN_META_DEV_ROOT}" ] ; then
  export ZOPEN_INSTALL="zopen_install"
else
  export ZOPEN_INSTALL='skip'
  echo "Installation will not be performed - testing dev environment"

  if ! [ -d "${ZOPEN_META_DEV_ROOT}" ] ; then
    echo "ZOPEN_META_DEV_ROOT points to ${ZOPEN_META_DEV_ROOT}, but the directory does not exist" >&2
    return 8
  fi

  # Set up our own 'meta' to use from our dev code and skip install
  basename=$(basename "${ZOPEN_META_DEV_ROOT}")
  if [ "x${basename}" != "xmeta" ]; then
    echo "ZOPEN_META_DEV_ROOT should point to a 'meta' cloned directory. It is: ${ZOPEN_META_DEV_ROOT}" >&2
    return 8
  fi

  META_DIR="${PWD}/meta"
  if [ -d "${META_DIR}" ]; then
    if ! [ -L "${META_DIR}" ]; then
      # We may already have a git clone'd meta. If so, move the cloned tree to meta-cloned
      mv "${META_DIR}" "${META_DIR}-cloned"
    else
      # There may already be a symbolic link here - if so, delete it in case it is stale
      rm "${META_DIR}"
    fi
  else
    # Directory has not yet been cloned - just have symbolic link created (next)
    :
  fi
      
  if ! ln -s "${ZOPEN_META_DEV_ROOT}" "${META_DIR}" ; then
    echo "Unable to create symbolic from from ${META_DIR} to ${ZOPEN_META_DEV_ROOT}" >&2
    return 8
  fi
fi

zopen_init()
{
  export PATH="$PWD/bin:$PATH"

  myzopen=$( whence zopen )
  if [ $? -gt 0 ]; then
    echo "Error - unable to find zopen in the PATH" >&2
    return 8
  fi
  if [ "${myzopen}" != "${PWD}/bin/zopen" ]; then
    echo "Error - unable to find local zopen at ${PWD}/bin/zopen" >&2
    return 8
  fi
}

zopen_check()
{
  WORK_DIR="${ZOPEN_ROOT}/work"
  mkdir -p "${WORK_DIR}"

  #
  # Set up environment
  #
  . ${ZOPEN_ROOT}/meta/.env

  checks=${ZOPEN_ROOT}/tests/zopen_check_*
  echo $checks
  for check in $checks ; do
    "${check}" "${WORK_DIR}"
    rc=$?
    if [ ${rc} -gt 0 ]; then
      echo "FAIL: ${check}"
    else
      echo "PASS: ${check}"
    fi
  done
  return 0
}

zopen_check_results()
{
  dir="$1"
  pfx="$2"
  chk="$1/$2_check.log"

  pass=$( cat "${chk}" | grep -E '^PASS: ' | wc -l)
  fail=$( cat "${chk}" | grep -E '^FAIL: ' | wc -l)
  echo "actualFailures:$fail"
  echo "totalTests:$(( pass+fail ))"
  echo "expectedFailures:0"
}

zopen_install()
{
  set -e
  mkdir -p "$ZOPEN_INSTALL_DIR"
  rm -rvf "$PWD/zotsampleport"
  rm -rvf "$PWD/.git"* "$PWD/.editorconfig"
  cp -rv $PWD/* $ZOPEN_INSTALL_DIR/
  set +e
}

zopen_append_to_setup() {
}


zopen_get_version()
{
  version="$(./bin/zopen --version 2>/dev/null)"
  echo "${version}" | head -1 | awk '{ print $4; }'
}
